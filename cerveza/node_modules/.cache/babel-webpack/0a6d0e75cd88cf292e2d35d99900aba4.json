{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor() {\n      this.items = new BehaviorSubject([]);\n      let cartItems = JSON.parse(localStorage.getItem('products')) || [];\n      this.items.next(cartItems);\n    } //servicio para compartir los datos almacenados en el carrito\n\n\n    addToCart(item) {\n      //conseguimos el arreglo actual\n      const products = this.items.value; //buscamos si dentro del arreglo esta el producto que vamos a agregar nuevamente\n\n      if (products.some(product => product.id == item.id)) {\n        //si esta, recorrer el arreglo de carrito y sumarle la nueva cantidad al producto\n        products.map(product => {\n          //se encuentra el producto comparando ids y si es el producto que se esta agregando sumarle la cantidad nueva\n          if (product.id == item.id) product.cant += item.cant;\n        });\n      } else {\n        //sino agregar el nuevo producto al carrito\n        products.push(item);\n      } //gaurdar el producto en la memoria del localstorage\n\n\n      localStorage.setItem('products', JSON.stringify(products)); //emitir el cambio\n\n      this.items.next(products);\n    }\n\n    isCartUpdated() {\n      return this.items.asObservable();\n    }\n\n    removeProduct(item) {\n      const products = this.items.value;\n      const filteredProducts = products.filter(product => product.id != item.id);\n      localStorage.setItem('products', JSON.stringify(filteredProducts));\n      this.items.next(filteredProducts);\n    }\n\n  }\n\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)();\n  };\n\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module"}